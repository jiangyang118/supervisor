import { Controller, Get, Res, Query } from '@nestjs/common';
import { MorningCheckService } from './morning-check.service';
import { SamplingService } from './sampling.service';
import { DisinfectionService } from './disinfection.service';
import { DineService } from './dine.service';
import { WasteService } from './waste.service';
// 使用 any 避免本地缺少 @types/express 造成编译失败

@Controller('reg/reports')
export class ReportsController {
  constructor(
    private readonly morning: MorningCheckService,
    private readonly sampling: SamplingService,
    private readonly disinfection: DisinfectionService,
    private readonly dine: DineService,
    private readonly waste: WasteService,
  ) {}

  private numId(id: string | number | undefined) {
    if (typeof id === 'number') return id;
    if (!id) return undefined;
    const n = Number(String(id).replace(/\D/g, ''));
    return Number.isFinite(n) ? n : undefined;
  }
  private schoolList() {
    return [
      { id: 'sch-001', name: '示例一中' },
      { id: 'sch-002', name: '示例二小' },
      { id: 'sch-003', name: '示例三幼' },
      { id: 'sch-004', name: '示例四小' },
      { id: 'sch-005', name: '示例五中' },
    ];
  }

  @Get('daily')
  async daily(
    @Query('start') start?: string,
    @Query('end') end?: string,
    @Query('schoolId') schoolId?: string,
  ) {
    const schools = schoolId
      ? this.schoolList().filter((s) => s.id === schoolId)
      : this.schoolList();
    const s = start;
    const e = end;
    const rows = await Promise.all(schools.map(async (sc) => {
      const morningRes = await this.morning.list({
        schoolId: sc.id,
        start: s,
        end: e,
        page: 1,
        pageSize: 100000,
      });
      const morning = morningRes.total;
      const samplingRes = await this.sampling.listSamples({
        schoolId: sc.id,
        start: s,
        end: e,
        page: 1,
        pageSize: 100000,
      });
      const sampling = samplingRes.total;
      const disinfectionRes = await this.disinfection.list({
        schoolId: sc.id,
        start: s,
        end: e,
        page: 1,
        pageSize: 100000,
      });
      const disinfection = disinfectionRes.total;
      const dineRes = await this.dine.list({
        schoolId: sc.id,
        start: s,
        end: e,
        page: 1,
        pageSize: 100000,
      });
      const dine = dineRes.total;
      const wasteRes = await this.waste.list({
        schoolId: this.numId(sc.id),
        start: s,
        end: e,
        page: '1',
        pageSize: '100000',
      });
      const waste = wasteRes.total;
      return { schoolId: sc.id, school: sc.name, morning, sampling, disinfection, dine, waste };
    }));
    const totalSchools = rows.length;
    const sum = (k: keyof (typeof rows)[number]) =>
      rows.reduce((acc, r) => acc + Number(r[k] || 0), 0);
    const morningReported = rows.filter((r) => r.morning > 0).length;
    const samplingReported = rows.filter((r) => r.sampling > 0).length;
    const disinfectionReported = rows.filter((r) => r.disinfection > 0).length;
    const dineReported = rows.filter((r) => r.dine > 0).length;
    const wasteReported = rows.filter((r) => r.waste > 0).length;
    const summary = {
      schools: totalSchools,
      // totals across all schools (counts of records)
      totals: {
        morning: sum('morning'),
        sampling: sum('sampling'),
        disinfection: sum('disinfection'),
        dine: sum('dine'),
        waste: sum('waste'),
      },
      // number of schools that did not report for the period
      missing: {
        morning: totalSchools - morningReported,
        sampling: totalSchools - samplingReported,
        disinfection: totalSchools - disinfectionReported,
        dine: totalSchools - dineReported,
        waste: totalSchools - wasteReported,
      },
    };
    return { rows, summary };
  }
  @Get('export')
  export(
    @Query('format') format = 'csv',
    @Res()
    res: { setHeader: (k: string, v: string) => void; send: (b: unknown) => unknown },
  ) {
    const rows = [
      { name: '晨检', count: 220 },
      { name: '留样', count: 150 },
      { name: '消毒', count: 240 },
      { name: '陪餐', count: 90 },
      { name: '废弃物', count: 260 },
      { name: 'AI 预警', count: 45 },
    ];
    if (format === 'pdf') {
      // 简单 PDF 占位：实际应使用模板渲染
      const content = Buffer.from(`%PDF-1.4
% Simple placeholder PDF generated by API Gateway`);
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', 'attachment; filename="daily-report.pdf"');
      return res.send(content);
    }
    // CSV 导出
    const header = '类别,数量' + '\n';
    const body = rows.map((r) => `${r.name},${r.count}`).join('\n');
    const csv = '﻿' + header + body;
    res.setHeader('Content-Type', 'text/csv; charset=utf-8');
    res.setHeader('Content-Disposition', 'attachment; filename="daily-report.csv"');
    return res.send(csv);
  }
}
