services:

  redis:
    image: redis:7-alpine
    ports: ['6379:6379']

  minio:
    image: quay.io/minio/minio:RELEASE.2024-08-17T01-24-54Z
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD:-minioadmin}
    command: server /data --console-address ":9001"
    ports:
      - '9000:9000'
      - '9001:9001'
    volumes:
      - minio:/data

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.1
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports: ['2181:2181']

  kafka:
    image: confluentinc/cp-kafka:7.6.1
    depends_on: [zookeeper]
    ports:
      - '9092:9092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    depends_on: [kafka]
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    ports: ['8080:8080']

  gateway-service:
    build:
      context: ..
      dockerfile: services/gateway-service/Dockerfile
      # args:
      #   # Use a China mirror for the base Node image to speed up/passthrough Docker Hub
      #   NODE_IMAGE: ${NODE_IMAGE:-registry.cn-hangzhou.aliyuncs.com/dockerhub-mirror/node:20-alpine}
    env_file:
      - ../.env
    environment:
      PORT: 3000
      # Either provide DATABASE_URL or MYSQL_* to the app
      # Use host database; override with HOST_DATABASE_URL if needed
      # Example: HOST_DATABASE_URL=mysql://user:pass@host.docker.internal:3306/foodsafe
      DATABASE_URL: ${HOST_DATABASE_URL:-mysql://wwwweb:Cpt2024%402025@101.201.249.22:3306/foodsafe}
    ports: ['3300:3000']
    # Allow container to resolve host.docker.internal on Linux (host-gateway)
    extra_hosts: ['host.docker.internal:host-gateway']
    depends_on:
      redis:
        condition: service_started
      kafka:
        condition: service_started

  # consolidated: school/regulator endpoints are now in gateway-service

  nginx:
    image: nginx:1.27-alpine
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - '8081:80'
    depends_on: [gateway-service]

  # Development-only service: mount migrations and dist, auto-reload with Node 20 --watch
  gateway-service-dev:
    build:
      context: ..
      dockerfile: services/gateway-service/Dockerfile
    env_file:
      - ../.env
    environment:
      PORT: 3000
      # Use host database in dev mode as well
      DATABASE_URL: ${HOST_DATABASE_URL:-mysql://wwwweb:Cpt2024%402025@101.201.249.22:3306/foodsafe}
    command: ["sh", "-lc", "node scripts/wait-for-db.js && node scripts/run-migrations.js && node --watch dist/services/gateway-service/src/main.js"]
    volumes:
      - ../services/gateway-service/migrations:/app/migrations:ro
      - ../services/gateway-service/dist:/app/dist
    ports: ['3301:3000']
    extra_hosts: ['host.docker.internal:host-gateway']
    depends_on:
      redis:
        condition: service_started
      kafka:
        condition: service_started
    profiles: ["dev"]

volumes:
  minio:
